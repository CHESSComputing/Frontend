<!-- tools.tmpl -->
<section>
    <article id="article">

<br/>
<div class="grid">
    <div class="column column-1">
    </div>
    <div class="column column-8">
        <h1>FOXDEN Command Line Tool</h1>
        <a href="https://github.com/CHESSComputing/gotools/releases/latest">foxden</a> command line tool provides access to all FOXDEN services
        <br/>
        <!------!>
        <div class="grid">
            <div class="column column-10">
                token commands
            </div>
            <div class="column column-2">
				<button class="button button-small" onclick="ToggleTag('auth')">Show</button>
            </div>
        </div>
        <!------!>
                <pre id="auth" class="hide">
foxden token create [scope: read|write|delete] [options]
foxden token view [options]

options: --kfile=keytab, --token=[token or file]
defaults: token generated with read scope
          kfile is /tmp/krb5cc_<UID>

Examples:
# generate read token
foxden token create read

# generate read token from specific /path/keytab file
foxden token create read -kfile=/path/keytab

# generate write token
foxden token create write

# view provided token=abc...xyz
foxden token view --token=abc...xyz

# view existing token stored in /tmp/token file
foxden token view --token=/tmp/token

# view existing token stored in [CHESS_TOKEN CHESS_WRITE_TOKEN CHESS_DELETE_TOKEN]
foxden token view
                </pre>
        <!------!>
        <div class="grid">
            <div class="column column-10">
                search commands
            </div>
            <div class="column column-2">
				<button class="button button-small" onclick="ToggleTag('search')">Show</button>
            </div>
        </div>
        <!------!>
                <pre id="search" class="hide">
foxden search <spec>

Examples:

# search CHESS data using query language, e.g. empty query match all records
foxden search {}

# search using query language,
# provide valid JSON use single quotes around it and double quotes for key:value pairs
foxden search '{"PI":"name"}'

# search using key:value pairs, e.g. pi:name where 'pi' is record key and 'name' would be PI user name
# keys can be in lower case, e.g. pi instead of PI used in meta-data record
foxden search pi:name
                </pre>
        <!------!>
        <div class="grid">
            <div class="column column-10">
                view commands
            </div>
            <div class="column column-2">
				<button class="button button-small" onclick="ToggleTag('view')">Show</button>
            </div>
        </div>
        <!------!>
                <pre id="view" class="hide">
foxden view [DID]
                </pre>
        <div class="grid">
            <div class="column column-10">
                Provenance commands
            </div>
            <div class="column column-2">
				<button class="button button-small" onclick="ToggleTag('prov')">Show</button>
            </div>
        </div>
        <!------!>
                <pre id="prov" class="hide">
foxden prov [ls|add] [options]
options: provenance attributes like dataset(s), file(s) or

Examples:

# list all provenance records:
foxden prov ls [datasets|files]

# list all dataset records for specific dataset:
foxden prov ls datasets --dataset=/x/y/z

# list all file records for specific dataset:
foxden prov ls files --dataset=/x/y/z

# add provenance data record:
foxden prov add <provenance.json>
                </pre>
        <!------!>
        <div class="grid">
            <div class="column column-10">
                Meta-data commands
            </div>
            <div class="column column-2">
				<button class="button button-small" onclick="ToggleTag('meta')">Show</button>
            </div>
        </div>
        <!------!>
                <pre id="meta" class="hide">
foxden meta [ls|add|rm] [value]
Examples:

# list all meta data records:
foxden meta ls

# list specific meta-data record:
foxden meta view [DID]

# remove meta-data record:
foxden meta rm 123xyz

# add meta-data record:
foxden meta add [schema] [file.json]
                </pre>
        <!------!>
        <div class="grid">
            <div class="column column-10">
                S3 commands
            </div>
            <div class="column column-2">
				<button class="button button-small" onclick="ToggleTag('s3')">Show</button>
            </div>
        </div>
        <!------!>
                <pre id="s3" class="hide">
foxden s3 [ls|create|delete|upload] [value]

Examples:

# create new bucket:
foxden s3 create Cornell/bucket

# remove bucket or file:
foxden s3 delete Cornell/bucket

# upload new file to a bucket:
foxden s3 upload Cornell/bucket file.txt

# upload all files from given directory to a bucket:
foxden s3 upload Cornell/bucket someDirectory

# list content of s3 storage:
foxden s3 ls Cornell

# list specific bucket on s3 storage:
foxden s3 ls Cornell/bucket
                </pre>
        <!------!>
        <div class="grid">
            <div class="column column-10">
                ML commands
            </div>
            <div class="column column-2">
				<button class="button button-small" onclick="ToggleTag('ml')">Show</button>
            </div>
        </div>
        <!------!>
                <pre id="ml" class="hide">
foxden ml [models|upload|predict|delete] [values]

Examples:

# upload new ML model:
foxden ml upload file=/path/file.tar.gz model=model type=TensorFlow backend=GoFake

# delete model:
foxden ml delete model=model type=TensorFlow [version=latest]

# ML inference:
foxden ml predict /path/input.json

# ML inference for input via submission, e.g. image prediction
foxden ml predict --file=/path/img.png --model=model --type=TensorFlow --backend=TFaaS
                </pre>
        <!------!>
        <div class="grid">
            <div class="column column-10">
                doi commands
            </div>
            <div class="column column-2">
				<button class="button button-small" onclick="ToggleTag('doi')">Show</button>
            </div>
        </div>
        <!------!>
                <pre id="doi" class="hide">
foxden doi [ls|create|update|publish|view] [DID] [options]

Examples:
# create new document:
foxden doi create

# create new document from given record:
foxden doi create /path/record.json

# add file to document id:
foxden doi add id /path/regular/file

# update document id with publish data record:
foxden doi update [id] /path/record.json

# publish document id:
foxden doi publish [id]

# list existing documents:
foxden doi ls [id]

# get details of document id:
foxden doi view [id]

Here is example of record.json

{
    "files": [
        {"name": "file1.txt", "file": "/path/file1.txt"},
        {"name": "file2.txt", "file": "/path/file2.txt"}
    ],
    "metadata": {
        "publication_type": "article",
        "upload_type": "publication",
        "description": "Test FOXDEN publication",
        "keywords": ["bla", "foo"],
        "creators": [{"name": "First Last", "affiliation": "Zenodo"}],
        "title": "Test experiment"
    }
}
                </pre>
        <!------!>

        <br/>
        <h1>FOXDEN services</h1>
        <ul>
            <li>
                <a href="https://github.com/CHESSComputing/MLHub/releases/latest">MLHub</a>
                data service specifically designed for managing AI/ML models (store ML models, and associated meta-data and provides inference API)
            </li>
            <li>
                <a href="https://github.com/CHESSComputing/CHAPBook/releases/latest">CHAPBook</a>
                data service for novice programmers with Jupyter-like interface for writing code, it is integrated with CHAP framework
            </li>
            <li>
                <a href="https://github.com/CHESSComputing/DataManagement/releases/latest">DataManagement</a>
                S3 complaint data management service for accessing raw and derived datasets.
            </li>
            <li>
                <a href="https://github.com/CHESSComputing/MetaData/releases/latest">MetaData</a>
                data service provides APIs and web interface to manage your meta-data.
            </li>
            <li>
                <a href="https://github.com/CHESSComputing/DataBookkeeping/releases/latest">Provenance</a>
                data service provides APIs to manage your provenance data.
            </li>
            <li>
                <a href="https://github.com/CHESSComputing/Discovery/releases/latest">Discovery</a>
                service allows you to search for meta and provenance data.
            </li>
            <li>
                <a href="https://github.com/CHESSComputing/SpecScansService/releases/latest">SpecScans</a>
                data service manages CHESS spec scans data
            </li>
            <li>
                <a href="https://github.com/CHESSComputing/PublicationService/releases/latest">Publication</a>
                service manages CHESS dataset publication and DOIs.
            </li>
        </ul>
    </div>
    <div class="column column-1">
    </div>
</div>
<br/>

    </article>
</section>
<!-- end of tools.tmpl -->
