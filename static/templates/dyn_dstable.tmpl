<section>
  <article id="article">
<div class="center huge">
    FOXDEN: datasets
</div>
<div>
    User {{.User}}{{if .Btrs}}, BTRs: {{.Btrs}}{{end}}
</div>
<hr/>


<div>
    <table id="dataTable" class="display" style="width:100%">
        <thead>
            <tr id="tableHeader">
                <!-- Headers will be populated dynamically -->
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

  </article>
</section>

<script>
$(document).ready(function() {
    let totalRecords = 0;
    let pageSize = 10;
    let columns = [];

    // Fetch initial data to determine columns and populate the first page
    fetchData(0, pageSize).then(response => {
        columns = response.columns;

        // Create table headers dynamically
        columns.forEach(function(col) {
            $("#tableHeader").append(`<th>${toCamelCase(col)}</th>`);
        });

        totalRecords = response.total;
        initializeDataTable(response.records);
    });

    // Convert underscore notation to CamelCase
    function toCamelCase(str) {
        return str.replace(/_./g, match => match.charAt(1).toUpperCase()).replace(/^./, match => match.toUpperCase());
    }

    // Function to fetch data from the server
    function fetchData(startIndex, limit) {
        return $.ajax({
            url: "/datasets",
            type: "GET",
            data: {
                idx: startIndex,
                limit: limit
            },
            dataType: "json"
        });
    }

    // Initialize DataTable with server-side pagination
    function initializeDataTable(initialData) {
        $('#dataTable').DataTable({
            data: initialData,
            columns: columns.map(col => ({ data: col, title: toCamelCase(col) })),
            pageLength: pageSize,
            serverSide: true,
            processing: true,
            ajax: function(data, callback, settings) {
                let pageIndex = Math.floor(data.start / pageSize);
                fetchData(pageIndex * pageSize, pageSize).then(response => {
                    callback({
                        recordsTotal: totalRecords,
                        recordsFiltered: totalRecords,
                        data: response.records
                    });
                });
            },
            language: {
                paginate: {
                    first: 'First',
                    last: 'Last',
                    next: 'Next',
                    previous: 'Prev'
                }
            }
        });
    }
});
</script>
