<section>
  <article id="article">
<div class="center huge">
    FOXDEN: datasets
</div>
<div class="grid">
    <div class="column column-11">
        <div>
            User {{.User}}{{if .Btrs}}, BTRs: {{.Btrs}}{{end}}
        </div>
    </div>
    <div class="column column-1">
        <span id="gearIcon">
            <img src="https://cdn.onlinewebfonts.com/svg/img_535570.png" alt="Services" style="width:20px;">
        </span>
    </div>
</div>

<hr/>


<div>
    <table id="dataTable" class="display" style="width:100%">
        <thead>
            <tr id="tableHeader">
                <!-- Headers will be populated dynamically -->
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>


<!-- Overlay and Popup Menu -->
<div id="overlay"></div>
<div id="popupMenu">
    <h3>Customize Columns</h3>
    <div id="columnCheckboxes">
        <!-- Checkboxes will be added dynamically -->
    </div>
    <button onclick="applySettings()">Apply</button>
</div>

  </article>
</section>

<script>

function getCookie(name, defaultValue = "defaultValue") {
    const cookieArr = document.cookie.split(";");

    for (let i = 0; i < cookieArr.length; i++) {
        const cookie = cookieArr[i].trim();
        if (cookie.startsWith(name + "=")) {
            return decodeURIComponent(cookie.substring(name.length + 1));
        }
    }

    // If the cookie wasn't found, return the default value
    return defaultValue;
}

$(document).ready(function() {
    let totalRecords = 0;
    let columns = [];
{{if .DataAttributes}}
    let userAttrs = getCookie("userAttrs", "{{.DataAttributes}}");
{{else}}
    let userAttrs = getCookie("userAttrs", "beamline,btr,cycle,sample_name,user");
{{end}}

    function saveSelectedColumns(columns) {
        document.cookie = "userAttrs=" + columns + "; path=/";
    }

    // Fetch initial data to determine columns and populate the first page
    fetchData(0, 10, "", "", "", userAttrs).then(response => {
        columns = response.columns;

        // Create table headers dynamically
        columns.forEach(function(col) {
            $("#tableHeader").append(`<th>${toCamelCase(col)}</th>`);
        });
        $("#tableHeader").append(`<th>Record</th>`); // Extra column for the record button

        totalRecords = response.total;
        initializeDataTable(response.records);
    });

    // Convert underscore notation to CamelCase
    function toCamelCase(str) {
        return str.replace(/_./g, match => match.charAt(1).toUpperCase()).replace(/^./, match => match.toUpperCase());
    }

    function openPopup() {
        $('#overlay').show();
        $('#popupMenu').show();
        $('#columnCheckboxes').html('');
{{if .DataAttributes}}
        cols = "{{.DataAttributes}}";
{{else}}
        cols = "beamline,btr,cycle,sample_name,user";
{{end}}
        userColumns = cols.split(',');
        userColumns.sort();
        // Create a table to hold the checkboxes
        $('#columnCheckboxes').append('<table id="checkboxTable"></table>');
        userColumns.forEach((col, index) => {
            // Start a new row every 10 columns
            if (index % 10 === 0) {
                $('#checkboxTable').append('<tr></tr>');
            }

            // Append the checkbox to the current row
            $('#checkboxTable tr:last').append(`<td><label><input type="checkbox" value="${col}" ${userAttrs.includes(col) ? 'checked' : ''}> ${col}</label></td>`);
        });

        //userColumns.forEach(col => {
        //    $('#columnCheckboxes').append(`<label><input type="checkbox" value="${col}" ${userAttrs.includes(col) ? 'checked' : ''}> ${col}</label><br>`);
        //});
    }

    function closePopup() {
        $('#overlay').hide();
        $('#popupMenu').hide();
    }

    $('#gearIcon').click(openPopup);
    $('#overlay').click(closePopup);

    window.applySettings = function() {
        selectedColumns = [];
        $('#columnCheckboxes input:checked').each(function() {
            selectedColumns.push($(this).val());
        });
        saveSelectedColumns(selectedColumns.join(","));
        closePopup();
        // reload page with new data
        window.location.reload();
    }

    // Function to fetch data from the server with optional search parameter
    function fetchData(startIndex, limit, searchTerm, sortKey, sortDirection, attrs) {
        return $.ajax({
            url: "/datasets",
            type: "GET",
            data: {
                idx: startIndex,
                limit: limit,
                search: searchTerm,
                attrs: attrs,
                sortKey: sortKey,
                sortDirection: sortDirection
            },
            dataType: "json"
        });
    }

    // Initialize DataTable with server-side pagination and search
    // https://datatables.net/manual/
    // https://datatables.net/reference/option/language
    function initializeDataTable(initialData) {
        $('#dataTable').DataTable({
            data: initialData,
            columns: columns.map(col => ({ data: col, title: toCamelCase(col) }))
                .concat([{ data: null, title: "Action", orderable: false, render: function(data, type, row) {
                    const payload = {
                        {{- range $index, $column := .Columns }}
                            "{{ $column }}": row["{{$column}}"],
                        {{- end }}
                    };
                    const payloadStr = JSON.stringify(payload);
                    return `
                        <form action="/search" method="POST" style="display:inline;">
                            <input type="hidden" name="query" value='${payloadStr}'>
                            <button type="submit">Record</button>
                        </form>
                    `;
                }}]),
            pageLength: 10,
            serverSide: true,
            processing: true,
            searchDelay: 500, // make delay 
            ajax: function(data, callback, settings) {
                const pageSize = data.length; // Get the current page length selected in the UI
                const pageIndex = data.start; // Start index for data
                const searchTerm = data.search.value || "";  // Retrieve search term from DataTables

                // Extract sorting information from the DataTables settings
                const orderColumnIdx = data.order[0].column;
                const sortKey = columns[orderColumnIdx];
                const sortDirection = data.order[0].dir; // "asc" or "desc"
                const attrs = "beamline,btr,cycle,sample_name,user";

                // Fetch data with current pagination and search term
                fetchData(pageIndex, pageSize, searchTerm, sortKey, sortDirection, attrs).then(response => {
                    callback({
                        recordsTotal: totalRecords,
                        recordsFiltered: response.total,
                        data: response.records
                    });
                });
            },
            lengthMenu: [10, 25, 50, 100], // Define selectable page length options
            language: {
                search: "Filter:",  // Customize the search label
                searchPlaceholder: "Type to filter...", // Optional: Customize the placeholder text
                info: "Page _PAGE_ of entries related to your BTR",
                infoEmpty: "No entries available based on your BTR...",
                infoFiltered: "(filtered from _MAX_ total entries)",
                emptyTable: "No datasets available based on your BTR and filter...",
                zeroRecords: "No datasets available based on your BTR and filter...",
                loadingRecords: "Loading...",
                processing: "Processing...",
                paginate: {
                    first: 'First',
                    last: 'Last',
                    next: 'Next',
                    previous: 'Prev'
                }
            }
        });
    }
});
</script>
