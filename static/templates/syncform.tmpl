<section>
  <article id="article" class="wide">
<div class="center huge">
     FOXDEN: synchronization request form
</div>


<div id="dashboard">
  <div class="grid">
    <div class="column column-11">
    </div>
    <div class="column column-1">
      <button onclick="ShowTag('submit');HideTag('dashboard')" class="button button-small button-dark push-right">Sync request</button>
    </div>
  </div>
  <br/>
<table class="table-sync">
  <thead style="background:#C0C0C0">
    <tr>
      {{- range .Columns }}
        <th>{{ . }}</th>
      {{- end }}
      <th>Action</th>
    </tr>
  </thead>
  <tbody style="padding:10px;">
  {{- if .Rows }}
    {{- range $i, $row := .Rows }}
      <tr data-uuid="{{ index $row "uuid" }}">
        {{- range $j, $col := $.Columns }}
          <td
            {{- if eq $col "status" }}
              id="status-{{ index $row "uuid" }}"
            {{- end }}
          >
            {{ with $v := index $row $col }}{{ $v }}{{ else }}<span class="muted">â€”</span>{{ end }}
          </td>
        {{- end }}
          <td id="delete-{{ index $row "uuid" }}">
            <button onclick="deleteRecord('{{ index $row "uuid" }}')" class="button button-small push-right">Delete</button>
          </td>
      </tr>
    {{- end }}
  {{- else }}
    <tr>
      <td colspan="{{.NColumns}}" style="text-align:center; font-style:italic; color:#666;">
        No sync records found
      </td>
    </tr>
  {{- end }}
  </tbody>
</table>


</div>

<div id="submit" class="hide">
  <div class="grid">
    <div class="column column-11">
    </div>
    <div class="column column-1">
      <button onclick="ShowTag('dashboard');HideTag('submit')" class="button button-small button-dark push-right">Sync dashboard</button>
    </div>
  </div>
  <br/>
<form action="{{.Base}}/sync" method="post" name="sync" id="sync" class="form">
  <fieldset id="SyncAction">
  <legend>Sync action</legend>
    <div class="form-item">
        <input type="hidden" name="user" value="{{.User}}">
        <div class="alert alert-info">
          <img src="https://cdn.onlinewebfonts.com/svg/img_559210.png" alt="Home" style="width:20px">
          FOXDEN synchronization form.
          Please obtain source and target tokens with
          <a href="https://chesscomputing.github.io/FOXDEN/docs/cli.html">foxden CLI</a>
          via the following set of commands:
          <pre>
# get token with read+write scope and long duration, e.g. 6 hours = 3600 seconds
foxden token create read+write --expires=21600
# view your token for cut-and-paste
foxden token view</pre>
          <h3>BTRs</h3>
{{if .Btrs}}
          <label>
              <input type="checkbox" id="select-all" onclick="toggleAll(this)">
              <strong>Select All</strong>
          </label>
          <ul class="btr-list">
              {{range .Btrs}}
              <li>
                  <label>
                      <input type="checkbox" class="btr-checkbox" name="btrs" value="{{.}}">
                      {{.}}
                  </label>
              </li>
              {{end}}
          </ul>
{{else}}
          <p><em>No BTRs is provided, will use all DIDs associated with this user</em></p>
{{end}}
        </div>
    </div>
  </fieldset>
  <fieldset id="FoxdenSource">
  <legend>FOXDEN source</legend>
    <div class="form-item">
        <label>Source FOXDEN URL<span class="hint hint-req">*</span></label>
        <input class="input" type="text" name="sourceUrl" placeholder="{{.SourceUrl}}">
    </div>
    <div class="form-item">
        <label>Token for source FOXDEN instance<span class="hint hint-req">*</span></label>
        <input class="input" type="text" name="sourceToken" placeholder="token with read, write or read+write permission">
    </div>
  </fieldset>
  <fieldset id="FoxdenTarget">
  <legend>FOXDEN target</legend>
    <div class="form-item">
        <label>Target FOXDEN URL<span class="hint hint-req">*</span></label>
        <input class="input" type="text" name="targetUrl" placeholder="{{.TargetUrl}}">
    </div>
    <div class="form-item">
        <label>Token for target FOXDEN instance<span class="hint hint-req">*</span></label>
        <input class="input" type="text" name="targetToken" placeholder="token with read, write or read+write permission">
    </div>
  </fieldset>
    <div class="form-item">
        <button class="button button-small button-dark">Submit</button>
        <button class="button button-small">Cancel</button>
    </div>
</form>

</div>

  </article>
</section>

<script>
function toggleAll(source) {
    const checkboxes = document.querySelectorAll('.btr-checkbox');
    for (const cb of checkboxes) {
        cb.checked = source.checked;
    }
}

function updateRowStatus(uuid) {
  fetch("/sync/status/" + uuid)
    .then(resp => {
      if (!resp.ok) throw new Error("Network error: " + resp.status);
      return resp.json();
    })
    .then(data => {
      const cell = document.getElementById("status-" + data.uuid);
      if (cell) {
        cell.textContent = data.status;
      }
    })
    .catch(err => {
      const cell = document.getElementById("status-" + uuid);
      if (cell) {
        cell.textContent = "Error";
        cell.style.color = "red";
      }
      console.error("Update failed:", err);
    });
}

// helper function to delete sync record
function deleteRecord(uuid) {
  if (!confirm("Are you sure you want to delete record " + uuid + "?")) {
    return;
  }

  fetch("/sync/delete/" + uuid, {
    method: "DELETE"
  })
  .then(resp => {
    if (!resp.ok) {
      throw new Error("Failed to delete: " + resp.status);
    }
    return resp.json();
  })
  .then(data => {
    const row = document.getElementById("row-" + data.uuid);
    if (row) {
      row.remove();
    }
  })
  .catch(err => {
    alert("Error deleting record: " + err);
  });
}


// Option 1: Update all rows periodically
function refreshAllStatuses() {
  document.querySelectorAll("tr[data-uuid]").forEach(row => {
    const uuid = row.getAttribute("data-uuid");
    updateRowStatus(uuid);
  });
}

// Refresh every 2s
setInterval(refreshAllStatuses, 2000);

// Initial load
refreshAllStatuses();

</script>
